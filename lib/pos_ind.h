/*
 * Copyright (c) 2017 - 2022 Samsung Electronics Co., Ltd. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef POS_IND_H
#define POS_IND_H

#include "sugar.h"
#include <tuple>
#include <type_traits>
#include <utility>

namespace testlib {
/////////////////////////////////
// position-independent defaults
/////////////////////////////////
namespace t {
	template <class M, class List, class=void> struct Member;
	template <class M> struct Member<M, std::tuple<>> { static constexpr bool v = false; };
	template <class M, class...Args> struct Member<M,std::tuple<M,Args...>> { static constexpr bool v = true; };
	template <class M, class A, class...Args> struct Member<M,std::tuple<A,Args...>, typename ::std::enable_if<!::std::is_same<M,A>::value>::type> { static constexpr bool v = Member<M,std::tuple<Args...>>::v; };
};

template <class List, class...Args> struct PositionArgOk;
template <class List> struct PositionArgOk<List> { static constexpr bool v = true; };
template <class List, class Arg, class...Args> struct PositionArgOk<List,Arg,Args...> { static constexpr bool v = !t::Member<Arg,List>::v && PositionArgOk<List,Args...>::v; };

#define NARGS_(_ZERO,_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,...) _99
#define NARGS(...) NARGS_(0,##__VA_ARGS__,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)

#define ENUMERATE_DECLTYPES(...) CAT(ENUMERATE_DECLTYPES,NARGS(__VA_ARGS__))(__VA_ARGS__)
#define ENUMERATE_DECLTYPES1(A) decltype(A)
#define ENUMERATE_DECLTYPES2(A,...) decltype(A), ENUMERATE_DECLTYPES1(__VA_ARGS__)
#define ENUMERATE_DECLTYPES3(A,...) decltype(A), ENUMERATE_DECLTYPES2(__VA_ARGS__)
#define ENUMERATE_DECLTYPES4(A,...) decltype(A), ENUMERATE_DECLTYPES3(__VA_ARGS__)
#define ENUMERATE_DECLTYPES5(A,...) decltype(A), ENUMERATE_DECLTYPES4(__VA_ARGS__)

#define ENUMERATE_DECLTYPE_ARGS(...) CAT(ENUMERATE_DECLTYPE_ARGS,NARGS(__VA_ARGS__))(__VA_ARGS__)
#define ENUMERATE_DECLTYPE_ARGS1(_)
#define ENUMERATE_DECLTYPE_ARGS2(_,A0) decltype(A0) a0,
#define ENUMERATE_DECLTYPE_ARGS3(_,A0,A1) ENUMERATE_DECLTYPE_ARGS2(_,A0) decltype(A1) a1,
#define ENUMERATE_DECLTYPE_ARGS4(_,A0,A1,A2) ENUMERATE_DECLTYPE_ARGS3(_,A0,A1) decltype(A2) a2,
#define ENUMERATE_DECLTYPE_ARGS5(_,A0,A1,A2,A3) ENUMERATE_DECLTYPE_ARGS4(_,A0,A1,A2) decltype(A3) a3,
#define ENUMERATE_DECLTYPE_ARGS6(_,A0,A1,A2,A3,A4) ENUMERATE_DECLTYPE_ARGS5(_,A0,A1,A2,A3) decltype(A4) a4,

// usage:
//   D_POSITION_INDEPENDENT_DEFAULTS(FUNCTION_NAME,((FIXED_ARGS_SIGNATURE,)?),((FIXED_ARGS,)), arg0name,arg0default, ..., argNname, argNdefault)
//   NOTE: the comma after FIXED_ARGS* is mandatory unless they are empty
// defines a function like so:
//   template <class...Args> auto FUNCTION_NAME(FIXED_ARGS_SIGNATURE, [[OPTIONAL_ARGS]], Args &&...args)
// where [[OPTIONAL_ARGS]] may be a subset of arg{0..N}name, given in any order
// types of argIname is decltype(argIdefault)
// optional arguments must have pairwise distinct types
// omitted optional argument argIname defaults to argIdefault
//
// examples:
//	D_POSITION_INDEPENDENT_DEFAULTS(dbSig,(),(), path,dbPath, iface,dbIface) {
//		return newSignal(path, iface, std::forward<Args>(args)...);
//	}
//	defines the function dbSig which may be called with any of the following type combinations:
//		template <class...Args> dbSig(Path, Args &&...)
//		template <class...Args> dbSig(Iface, Args &&...)
//		template <class...Args> dbSig(Path, Iface, Args &&...)
//		template <class...Args> dbSig(Iface, Path, Args &&...)
//
//	D_POSITION_INDEPENDENT_DEFAULTS(isSig,(DBusMessage *m,),(m,), iface,dbIface, member,dbMember) { //NOTE the commas after FIXARGS
//		static_assert(0 == sizeof...(Args), "no trailing args permitted");
//		return dbus_message_is_##WHAT(m, iface(), member());
//	}
//	defines the function isSig which may be called with any of the following type combinations:
//		isSig(DBusMessage *m)
//		isSig(DBusMessage *m, Iface)
//		isSig(DBusMessage *m, Member)
//		isSig(DBusMessage *m, Iface, Member)
//		isSig(DBusMessage *m, Member, Iface)

#define D_POSITION_INDEPENDENT_DEFAULTS(FUNC_NAME,FIXSIG,FIXARGS,...) CAT(D_POSITION_INDEPENDENT_DEFAULTS,NARGS(__VA_ARGS__))(FUNC_NAME,FIXSIG,FIXARGS,__VA_ARGS__)
#define D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME,FIXSIG,FIXARGS,ALL_DEFAULTS,ARG_DEFAULTS,...)\
	template <class...Args, class=typename ::std::enable_if<testlib::PositionArgOk<std::tuple<ENUMERATE_DECLTYPES ALL_DEFAULTS>,Args...>::v>::type> auto\
	FUNC_NAME(UNPAREN FIXSIG ENUMERATE_DECLTYPE_ARGS ARG_DEFAULTS Args&&...args) {\
		return CAT(FUNC_NAME,_D_POSITION_INDEPENDENT_DEFAULTS_FUNC)(UNPAREN FIXARGS __VA_ARGS__, std::forward<Args>(args)...);\
	}

#define D_POSITION_INDEPENDENT_DEFAULTS2(FUNC_NAME,FIXSIG,FIXARGS,A0,D0)\
	template <class...Args> auto CAT(FUNC_NAME,_D_POSITION_INDEPENDENT_DEFAULTS_FUNC)(UNPAREN FIXSIG ENUMERATE_DECLTYPE_ARGS(D0) Args&&...args);\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0), (_),    D0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0), (_,D0), a0)\
	template <class...Args> auto CAT(FUNC_NAME,_D_POSITION_INDEPENDENT_DEFAULTS_FUNC)(UNPAREN FIXSIG decltype(D0) A0, Args&&...args)

#define D_POSITION_INDEPENDENT_DEFAULTS4(FUNC_NAME,FIXSIG,FIXARGS,A0,D0,A1,D1)\
	template <class...Args> auto CAT(FUNC_NAME,_D_POSITION_INDEPENDENT_DEFAULTS_FUNC)(UNPAREN FIXSIG ENUMERATE_DECLTYPE_ARGS(D0,D1) Args&&...args);\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1), (_),             D0,D1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1), (_,D0),          a0,D1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1), (_,D0,D1),       a0,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1), (_,D1),          D0,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1), (_,D1,D0),       a1,a0)\
	template <class...Args> auto CAT(FUNC_NAME,_D_POSITION_INDEPENDENT_DEFAULTS_FUNC)(UNPAREN FIXSIG decltype(D0) A0, decltype(D1) A1, Args&&...args)

#define D_POSITION_INDEPENDENT_DEFAULTS6(FUNC_NAME,FIXSIG,FIXARGS,A0,D0,A1,D1,A2,D2)\
	template <class...Args> auto CAT(FUNC_NAME,_D_POSITION_INDEPENDENT_DEFAULTS_FUNC)(UNPAREN FIXSIG ENUMERATE_DECLTYPE_ARGS(D0,D1,D2) Args&&...args);\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_),             D0,D1,D2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D0),          a0,D1,D2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D0,D1),       a0,a1,D2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D0,D1,D2),    a0,a1,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D0,D2),       a0,D1,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D0,D2,D1),    a0,a2,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D1),          D0,a0,D2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D1,D0),       a1,a0,D2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D1,D0,D2),    a1,a0,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D1,D2),       D0,a0,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D1,D2,D0),    a2,a0,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D2),          D0,D1,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D2,D1),       D0,a1,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D2,D1,D0),    a2,a1,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D2,D0),       a1,D1,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2), (_,D2,D0,D1),    a1,a2,a0)\
	template <class...Args> auto CAT(FUNC_NAME,_D_POSITION_INDEPENDENT_DEFAULTS_FUNC)(UNPAREN FIXSIG decltype(D0) A0, decltype(D1) A1, decltype(D2) A2, Args&&...args)

#define D_POSITION_INDEPENDENT_DEFAULTS8(FUNC_NAME,FIXSIG,FIXARGS,A0,D0,A1,D1,A2,D2,A3,D3)\
	template <class...Args> auto CAT(FUNC_NAME,_D_POSITION_INDEPENDENT_DEFAULTS_FUNC)(UNPAREN FIXSIG ENUMERATE_DECLTYPE_ARGS(D0,D1,D2,D3) Args&&...args);\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_),             D0,D1,D2,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0),          a0,D1,D2,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D1),       a0,a1,D2,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D1,D2),    a0,a1,a2,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D1,D2,D3), a0,a1,a2,a3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D1,D3),    a0,a1,D2,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D1,D3,D2), a0,a1,a3,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D2),       a0,D1,a1,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D2,D1),    a0,a2,a1,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D2,D1,D3), a0,a2,a1,a3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D2,D3),    a0,D1,a1,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D2,D3,D1), a0,a3,a1,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D3),       a0,D1,D2,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D3,D1),    a0,a1,D2,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D3,D1,D2), a0,a2,a3,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D3,D2),    a0,D1,a2,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D0,D3,D2,D1), a0,a3,a2,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1),          D0,a0,D2,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D0),       a1,a0,D2,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D0,D2),    a1,a0,a2,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D0,D2,D3), a1,a0,a2,a3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D0,D3),    a1,a0,D2,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D0,D3,D2), a1,a0,a3,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D2),       D0,a0,a1,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D2,D0),    a2,a0,a1,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D2,D0,D3), a2,a0,a1,a3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D2,D3),    D0,a0,a1,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D2,D3,D0), a3,a0,a1,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D3),       D0,a0,D2,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D3,D0),    a2,a0,D2,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D3,D0,D2), a2,a0,a3,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D3,D2),    D0,a0,a2,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D1,D3,D2,D0), a3,a0,a2,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2),          D0,D1,a0,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D1),       D0,a1,a0,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D1,D0),    a2,a1,a0,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D1,D0,D3), a2,a1,a0,a3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D1,D3),    D0,a1,a0,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D1,D3,D0), a3,a1,a0,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D0),       a1,D1,a0,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D0,D1),    a1,a2,a0,D3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D0,D1,D3), a1,a2,a0,a3)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D0,D3),    a1,D1,a0,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D0,D3,D1), a1,a3,a0,a2)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D3),       D0,D1,a0,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D3,D1),    D0,a2,a0,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D3,D1,D0), a3,a2,a0,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D3,D0),    a2,D1,a0,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D2,D3,D0,D1), a2,a3,a0,a1)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3),          D0,D1,D2,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D1),       D0,a1,D2,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D1,D2),    D0,a1,a2,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D1,D2,D0), a3,a1,a2,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D1,D0),    a2,a1,D2,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D1,D0,D2), a2,a1,a3,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D2),       D0,D1,a1,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D2,D1),    D0,a2,a1,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D2,D1,D0), a3,a2,a1,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D2,D0),    a2,D1,a1,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D2,D0,D1), a2,a3,a1,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D0),       a1,D1,D2,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D0,D1),    a1,a2,D2,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D0,D1,D2), a1,a2,a3,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D0,D2),    a1,D1,a2,a0)\
	D_POSITION_INDEPENDENT_DEFAULTS_FRONTEND_(FUNC_NAME, FIXSIG, FIXARGS, (D0,D1,D2,D3), (_,D3,D0,D2,D1), a1,a3,a2,a0)\
	template <class...Args> auto CAT(FUNC_NAME,_D_POSITION_INDEPENDENT_DEFAULTS_FUNC)(UNPAREN FIXSIG decltype(D0) A0, decltype(D1) A1, decltype(D2) A2, decltype(D3) A3, Args&&...args)

} // namespace testlib

#endif // POS_IND_H
